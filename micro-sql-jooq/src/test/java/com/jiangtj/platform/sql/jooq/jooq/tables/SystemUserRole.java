/*
 * This file is generated by jOOQ.
 */
package com.jiangtj.platform.sql.jooq.jooq.tables;


import com.jiangtj.platform.sql.jooq.jooq.Keys;
import com.jiangtj.platform.sql.jooq.jooq.SystemDb;
import com.jiangtj.platform.sql.jooq.jooq.tables.records.SystemUserRoleRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemUserRole extends TableImpl<SystemUserRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>system-db.system_user_role</code>
     */
    public static final SystemUserRole SYSTEM_USER_ROLE = new SystemUserRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SystemUserRoleRecord> getRecordType() {
        return SystemUserRoleRecord.class;
    }

    /**
     * The column <code>system-db.system_user_role.user_id</code>.
     */
    public final TableField<SystemUserRoleRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>system-db.system_user_role.role</code>.
     */
    public final TableField<SystemUserRoleRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private SystemUserRole(Name alias, Table<SystemUserRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private SystemUserRole(Name alias, Table<SystemUserRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>system-db.system_user_role</code> table reference
     */
    public SystemUserRole(String alias) {
        this(DSL.name(alias), SYSTEM_USER_ROLE);
    }

    /**
     * Create an aliased <code>system-db.system_user_role</code> table reference
     */
    public SystemUserRole(Name alias) {
        this(alias, SYSTEM_USER_ROLE);
    }

    /**
     * Create a <code>system-db.system_user_role</code> table reference
     */
    public SystemUserRole() {
        this(DSL.name("system_user_role"), null);
    }

    public <O extends Record> SystemUserRole(Table<O> child, ForeignKey<O, SystemUserRoleRecord> key) {
        super(child, key, SYSTEM_USER_ROLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SystemDb.SYSTEM_DB;
    }

    @Override
    public UniqueKey<SystemUserRoleRecord> getPrimaryKey() {
        return Keys.KEY_SYSTEM_USER_ROLE_PRIMARY;
    }

    @Override
    public SystemUserRole as(String alias) {
        return new SystemUserRole(DSL.name(alias), this);
    }

    @Override
    public SystemUserRole as(Name alias) {
        return new SystemUserRole(alias, this);
    }

    @Override
    public SystemUserRole as(Table<?> alias) {
        return new SystemUserRole(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemUserRole rename(String name) {
        return new SystemUserRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemUserRole rename(Name name) {
        return new SystemUserRole(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemUserRole rename(Table<?> name) {
        return new SystemUserRole(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
