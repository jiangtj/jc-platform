/*
 * This file is generated by jOOQ.
 */
package com.jiangtj.platform.system.jooq.tables.records;


import com.jiangtj.platform.system.jooq.tables.SystemKeyShare;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SystemKeyShareRecord extends UpdatableRecordImpl<SystemKeyShareRecord> implements Record5<String, String, String, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>jc_admin.system_key_share.kid</code>.
     */
    public void setKid(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>jc_admin.system_key_share.kid</code>.
     */
    @NotNull
    @Size(max = 256)
    public String getKid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>jc_admin.system_key_share.application</code>.
     */
    public void setApplication(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>jc_admin.system_key_share.application</code>.
     */
    @NotNull
    @Size(max = 256)
    public String getApplication() {
        return (String) get(1);
    }

    /**
     * Setter for <code>jc_admin.system_key_share.jwk</code>.
     */
    public void setJwk(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>jc_admin.system_key_share.jwk</code>.
     */
    @NotNull
    @Size(max = 5000)
    public String getJwk() {
        return (String) get(2);
    }

    /**
     * Setter for <code>jc_admin.system_key_share.publish_time</code>.
     */
    public void setPublishTime(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>jc_admin.system_key_share.publish_time</code>.
     */
    @NotNull
    public LocalDateTime getPublishTime() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>jc_admin.system_key_share.read_time</code>.
     */
    public void setReadTime(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>jc_admin.system_key_share.read_time</code>.
     */
    public LocalDateTime getReadTime() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, String, String, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return SystemKeyShare.SYSTEM_KEY_SHARE.KID;
    }

    @Override
    public Field<String> field2() {
        return SystemKeyShare.SYSTEM_KEY_SHARE.APPLICATION;
    }

    @Override
    public Field<String> field3() {
        return SystemKeyShare.SYSTEM_KEY_SHARE.JWK;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return SystemKeyShare.SYSTEM_KEY_SHARE.PUBLISH_TIME;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return SystemKeyShare.SYSTEM_KEY_SHARE.READ_TIME;
    }

    @Override
    public String component1() {
        return getKid();
    }

    @Override
    public String component2() {
        return getApplication();
    }

    @Override
    public String component3() {
        return getJwk();
    }

    @Override
    public LocalDateTime component4() {
        return getPublishTime();
    }

    @Override
    public LocalDateTime component5() {
        return getReadTime();
    }

    @Override
    public String value1() {
        return getKid();
    }

    @Override
    public String value2() {
        return getApplication();
    }

    @Override
    public String value3() {
        return getJwk();
    }

    @Override
    public LocalDateTime value4() {
        return getPublishTime();
    }

    @Override
    public LocalDateTime value5() {
        return getReadTime();
    }

    @Override
    public SystemKeyShareRecord value1(String value) {
        setKid(value);
        return this;
    }

    @Override
    public SystemKeyShareRecord value2(String value) {
        setApplication(value);
        return this;
    }

    @Override
    public SystemKeyShareRecord value3(String value) {
        setJwk(value);
        return this;
    }

    @Override
    public SystemKeyShareRecord value4(LocalDateTime value) {
        setPublishTime(value);
        return this;
    }

    @Override
    public SystemKeyShareRecord value5(LocalDateTime value) {
        setReadTime(value);
        return this;
    }

    @Override
    public SystemKeyShareRecord values(String value1, String value2, String value3, LocalDateTime value4, LocalDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SystemKeyShareRecord
     */
    public SystemKeyShareRecord() {
        super(SystemKeyShare.SYSTEM_KEY_SHARE);
    }

    /**
     * Create a detached, initialised SystemKeyShareRecord
     */
    public SystemKeyShareRecord(String kid, String application, String jwk, LocalDateTime publishTime, LocalDateTime readTime) {
        super(SystemKeyShare.SYSTEM_KEY_SHARE);

        setKid(kid);
        setApplication(application);
        setJwk(jwk);
        setPublishTime(publishTime);
        setReadTime(readTime);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SystemKeyShareRecord
     */
    public SystemKeyShareRecord(com.jiangtj.platform.system.jooq.tables.pojos.SystemKeyShare value) {
        super(SystemKeyShare.SYSTEM_KEY_SHARE);

        if (value != null) {
            setKid(value.kid());
            setApplication(value.application());
            setJwk(value.jwk());
            setPublishTime(value.publishTime());
            setReadTime(value.readTime());
            resetChangedOnNotNull();
        }
    }
}
