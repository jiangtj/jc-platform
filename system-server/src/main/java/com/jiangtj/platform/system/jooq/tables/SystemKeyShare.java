/*
 * This file is generated by jOOQ.
 */
package com.jiangtj.platform.system.jooq.tables;


import com.jiangtj.platform.system.jooq.JcAdmin;
import com.jiangtj.platform.system.jooq.Keys;
import com.jiangtj.platform.system.jooq.tables.records.SystemKeyShareRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SystemKeyShare extends TableImpl<SystemKeyShareRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jc_admin.system_key_share</code>
     */
    public static final SystemKeyShare SYSTEM_KEY_SHARE = new SystemKeyShare();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SystemKeyShareRecord> getRecordType() {
        return SystemKeyShareRecord.class;
    }

    /**
     * The column <code>jc_admin.system_key_share.kid</code>.
     */
    public final TableField<SystemKeyShareRecord, String> KID = createField(DSL.name("kid"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>jc_admin.system_key_share.jwk</code>.
     */
    public final TableField<SystemKeyShareRecord, String> JWK = createField(DSL.name("jwk"), SQLDataType.VARCHAR(5000).nullable(false), this, "");

    /**
     * The column <code>jc_admin.system_key_share.publish_time</code>.
     */
    public final TableField<SystemKeyShareRecord, LocalDateTime> PUBLISH_TIME = createField(DSL.name("publish_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>jc_admin.system_key_share.read_time</code>.
     */
    public final TableField<SystemKeyShareRecord, LocalDateTime> READ_TIME = createField(DSL.name("read_time"), SQLDataType.LOCALDATETIME(0), this, "");

    private SystemKeyShare(Name alias, Table<SystemKeyShareRecord> aliased) {
        this(alias, aliased, null);
    }

    private SystemKeyShare(Name alias, Table<SystemKeyShareRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jc_admin.system_key_share</code> table reference
     */
    public SystemKeyShare(String alias) {
        this(DSL.name(alias), SYSTEM_KEY_SHARE);
    }

    /**
     * Create an aliased <code>jc_admin.system_key_share</code> table reference
     */
    public SystemKeyShare(Name alias) {
        this(alias, SYSTEM_KEY_SHARE);
    }

    /**
     * Create a <code>jc_admin.system_key_share</code> table reference
     */
    public SystemKeyShare() {
        this(DSL.name("system_key_share"), null);
    }

    public <O extends Record> SystemKeyShare(Table<O> child, ForeignKey<O, SystemKeyShareRecord> key) {
        super(child, key, SYSTEM_KEY_SHARE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JcAdmin.JC_ADMIN;
    }

    @Override
    public UniqueKey<SystemKeyShareRecord> getPrimaryKey() {
        return Keys.KEY_SYSTEM_KEY_SHARE_PRIMARY;
    }

    @Override
    public SystemKeyShare as(String alias) {
        return new SystemKeyShare(DSL.name(alias), this);
    }

    @Override
    public SystemKeyShare as(Name alias) {
        return new SystemKeyShare(alias, this);
    }

    @Override
    public SystemKeyShare as(Table<?> alias) {
        return new SystemKeyShare(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemKeyShare rename(String name) {
        return new SystemKeyShare(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemKeyShare rename(Name name) {
        return new SystemKeyShare(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemKeyShare rename(Table<?> name) {
        return new SystemKeyShare(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
